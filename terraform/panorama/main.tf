### Get autogenerated QwikLabs key

data "aws_key_pair" "panorama" {
  include_public_key = true

  filter {
    name   = "key-name"
    values = [var.panorama_ssh_key_name]
  }
}

### Panorama Encrypted Volumes

data "aws_ebs_default_kms_key" "current" {
  count = var.panorama_ebs_encrypted ? 1 : 0
}

data "aws_kms_alias" "current_arn" {
  count = var.panorama_ebs_encrypted ? 1 : 0

  name = var.panorama_ebs_kms_key_alias != "" ? "alias/${var.panorama_ebs_kms_key_alias}" : data.aws_ebs_default_kms_key.current[0].key_arn
}

### Module calls for app2 VPC

module "management_vpc" {
  source           = "../modules/vpc"
  global_tags      = var.global_tags
  region           = var.region
  prefix_name_tag  = var.prefix_name_tag
  vpc              = var.management_vpc
  vpc_route_tables = var.management_vpc_route_tables
  subnets          = var.management_vpc_subnets
  vpc_endpoints    = var.management_vpc_endpoints
  security_groups  = var.management_vpc_security_groups
}

module "management_vpc_routes" {
  source            = "../modules/vpc_routes"
  region            = var.region
  global_tags       = var.global_tags
  prefix_name_tag   = var.prefix_name_tag
  vpc_routes        = var.management_vpc_routes
  vpc_route_tables  = module.management_vpc.route_table_ids
  internet_gateways = module.management_vpc.internet_gateway_id
  nat_gateways      = module.management_vpc.nat_gateway_ids
  transit_gateways  = module.management_transit_gateways.transit_gateway_ids
}

module "management_transit_gateways" {
  source                          = "../modules/transit_gateway"
  global_tags                     = var.global_tags
  prefix_name_tag                 = var.prefix_name_tag
  subnets                         = module.management_vpc.subnet_ids
  vpcs                            = module.management_vpc.vpc_id
  transit_gateways                = var.management_transit_gateways
  transit_gateway_vpc_attachments = var.management_transit_gateway_vpc_attachments
}

module "panorama" {
  source = "../modules/panorama"

  availability_zone      = var.panorama_az
  panorama_ami_id        = var.panorama_ami_id
  private_ip_address     = var.private_ip_address
  create_public_ip       = var.panorama_create_public_ip
  ebs_volumes            = var.panorama_ebs_volumes
  name                   = var.panorama_deployment_name
  instance_type          = "t3.xlarge"
  ebs_kms_key_alias      = try(data.aws_kms_alias.current_arn[0].arn, null)
  panorama_version       = var.panorama_version
  ssh_key_name           = data.aws_key_pair.panorama.key_name
  subnet_id              = module.management_vpc.subnet_ids["management1"]
  vpc_security_group_ids = [module.management_vpc.security_group_ids["panorama"]]
  panorama_iam_role      = var.panorama_create_iam_instance_profile == false ? null : aws_iam_instance_profile.panorama_instance_profile[0].name

  global_tags = var.global_tags

  depends_on = [
    aws_iam_instance_profile.panorama_instance_profile
  ]
}

# module "security_vpc" {
#   source = "../modules/vpc"

#   cidr_block              = var.vpc_cidr
#   create_internet_gateway = true
#   enable_dns_hostnames    = true
#   enable_dns_support      = true
#   instance_tenancy        = "default"
#   name                    = "${var.name_prefix}${var.vpc_name}"
#   security_groups         = var.vpc_security_groups
# }

# module "security_subnet_sets" {
#   for_each = toset(distinct([for _, v in var.vpc_subnets : v.set]))
#   source   = "../modules/subnet_set"

#   cidrs               = { for k, v in var.vpc_subnets : k => v if v.set == each.key }
#   has_secondary_cidrs = module.security_vpc.has_secondary_cidrs
#   name                = each.key
#   vpc_id              = module.security_vpc.id
# }

# locals {
#   security_vpc_routes = concat(
#     [
#       for cidr in var.vpc_routes_outbound_destin_cidrs :
#       {
#         subnet_key   = "mgmt"
#         next_hop_set = module.security_vpc.igw_as_next_hop_set
#         to_cidr      = cidr
#       }
#     ],
#   )
# }

# module "security_vpc_routes" {
#   for_each = { for route in local.security_vpc_routes : "${route.subnet_key}_${route.to_cidr}" => route }
#   source   = "../modules/vpc_route"

#   next_hop_set    = each.value.next_hop_set
#   route_table_ids = module.security_subnet_sets[each.value.subnet_key].unique_route_table_ids
#   to_cidr         = each.value.to_cidr
# }
